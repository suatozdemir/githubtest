/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../components/algorithms/algorithms';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../../components/insertion-sort/insertion-sort';
import * as import9 from '../insertion-sort/insertion-sort.ngfactory';
export class Wrapper_Algorithms {
  /*private*/ _eventHandler:Function;
  context:import0.Algorithms;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.Algorithms();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_Algorithms_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_Algorithms_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.Algorithms>;
  _Algorithms_0_3:Wrapper_Algorithms;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Algorithms_Host0,renderType_Algorithms_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'algorithms',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Algorithms0(this.viewUtils,this,0,this._el_0);
    this._Algorithms_0_3 = new Wrapper_Algorithms();
    this.compView_0.create(this._Algorithms_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._Algorithms_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Algorithms) && (0 === requestNodeIndex))) { return this._Algorithms_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Algorithms_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const AlgorithmsNgFactory:import7.ComponentFactory<import0.Algorithms> = new import7.ComponentFactory<import0.Algorithms>('algorithms',View_Algorithms_Host0,import0.Algorithms);
const styles_Algorithms:any[] = ([] as any[]);
var renderType_Algorithms:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_Algorithms,{});
export class View_Algorithms0 extends import1.AppView<import0.Algorithms> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _el_6:any;
  compView_6:import1.AppView<import8.InsertionSort>;
  _InsertionSort_6_3:import9.Wrapper_InsertionSort;
  _text_7:any;
  _el_8:any;
  _el_9:any;
  _text_10:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Algorithms0,renderType_Algorithms,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'h1',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'Insertion Sort Demo',(null as any));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'Watch the list get sorted as the algorithm traverses the list',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,parentRenderNode,'insertion-sort',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_6 = new import9.View_InsertionSort0(this.viewUtils,this,6,this._el_6);
    this._InsertionSort_6_3 = new import9.Wrapper_InsertionSort();
    this.compView_6.create(this._InsertionSort_6_3.context);
    this._text_7 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_8 = import3.createRenderElement(this.renderer,parentRenderNode,'h4',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_8,'a',new import3.InlineArray2(2,'href','http://www.syntaxsuccess.com/viewarticle/timeouts-and-timerwrapper-in-angular-2.0'),(null as any));
    this._text_10 = this.renderer.createText(this._el_9,'Read more here',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._el_8,
      this._el_9,
      this._text_10
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import8.InsertionSort) && (6 === requestNodeIndex))) { return this._InsertionSort_6_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._InsertionSort_6_3.ngDoCheck(this,this._el_6,throwOnChange);
    this.compView_6.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_6.destroy();
  }
}